buildscript {
    ext {
        enableGoogleVariant = project.file('google-services.json').exists()
    }
    repositories {
        google()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$versions.hilt"
        if (enableGoogleVariant) {
            // START Non-FOSS component
            classpath 'com.google.gms:google-services:4.3.4'
            classpath 'com.google.firebase:firebase-crashlytics-gradle:2.4.1'
            // END Non-FOSS component
        }
    }
}

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "org.jetbrains.kotlin.kapt"
    id "com.google.protobuf" version "0.8.16"
    id "org.jetbrains.kotlin.plugin.serialization" version "1.4.32"
    id "com.google.devtools.ksp" version "1.4.32-1.0.0-alpha07"
}

if (enableGoogleVariant) {
    // START Non-FOSS component
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
    // END Non-FOSS component
}

apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion global.compileSdkVersion
    buildToolsVersion global.buildToolsVersion

    defaultConfig {
        applicationId "com.twidere.twiderex"
        minSdkVersion global.minSdkVersion
        targetSdkVersion global.targetSdkVersion
        versionCode global.versionCode
        versionName global.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        def apiKeyProperties = rootProject.file('apiKey.properties')
        def hasApiKeyProps = apiKeyProperties.exists()
        if (hasApiKeyProps) {
            Properties apiKeyProp = new Properties()
            apiKeyProp.load(apiKeyProperties.newInputStream())
            buildConfigField "String", "CONSUMERKEY", apiKeyProp.get("ConsumerKey")
            buildConfigField "String", "CONSUMERSECRET", apiKeyProp.get("ConsumerSecret")
        }

    }

    lintOptions{
        disable 'MissingTranslation'
    }

    flavorDimensions 'channel'
    productFlavors {
        if (enableGoogleVariant) {
            // START Non-FOSS component
            google {
                dimension 'channel'
            }
            // END Non-FOSS component
        }
        fdroid {
            dimension 'channel'
        }
    }

    def file = rootProject.file('signing.properties')
    def hasSigningProps = file.exists()

    signingConfigs {
        if (hasSigningProps) {
            twidere {
                Properties signingProp = new Properties()
                signingProp.load(file.newInputStream())
                storeFile = rootProject.file(signingProp.get('storeFile'))
                storePassword = (String) signingProp.get('storePassword')
                keyAlias = (String) signingProp.get('keyAlias')
                keyPassword = (String) signingProp.get('keyPassword')
            }
        }
    }

    buildTypes {
        debug {
            if (hasSigningProps) {
                signingConfig signingConfigs.twidere
            }
        }
        release {
            if (hasSigningProps) {
                signingConfig signingConfigs.twidere
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.each {
        it.res.srcDirs += project.files("src/${it.name}/res-localized")
        it.java.srcDirs += "src/${it.name}/kotlin"
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
        useIR = true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.get()
    }

    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude "DebugProbesKt.bin"
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${libs.versions.protobuf.get()}"
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

dependencies {
    implementation libs.kotlinx.serialization.json
    implementation libs.vectordrawable

    implementation projects.services
    ksp projects.assistedProcessor

    implementation libs.bundles.compose
    androidTestImplementation libs.compose.ui.test

    implementation libs.bundles.paging
    implementation libs.bundles.activity
    implementation libs.dataStore

    implementation libs.bundles.hilt.base
    kapt libs.bundles.hilt.compiler

    implementation libs.bundles.room
    kapt libs.room.compiler

    implementation libs.bundles.lifecycle

    implementation libs.work.runtime.ktx

    implementation libs.startup

    implementation libs.bundles.accompanist

    implementation libs.zoomable
    implementation libs.nestedScrollView
    implementation libs.swiper
    implementation libs.placeholder

    implementation libs.twittertext
    implementation libs.jsoup

    debugImplementation libs.leakcanary

    implementation libs.protobuf.javalite

    implementation libs.exoplayer

    if (enableGoogleVariant) {
        // START Non-FOSS component
        googleImplementation platform('com.google.firebase:firebase-bom:26.1.0')
        googleImplementation 'com.google.firebase:firebase-analytics-ktx'
        googleImplementation 'com.google.firebase:firebase-crashlytics-ktx'
        // END Non-FOSS component
    }

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation libs.room.testing
    testImplementation libs.bundles.mockito.test
    testImplementation libs.android.test.core
    androidTestImplementation libs.android.test.core
    testImplementation libs.kotlinx.coroutines.test
    androidTestImplementation libs.bundles.androidx.test
}

apply from: 'translate.gradle'